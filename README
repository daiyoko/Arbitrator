=====
About
=====
Yes, this is all done at the transport layer. I had conisdered doing
everything at the link-layer, however, this added an extra (unneccessary)
layer of complexity handling/mixing kernel duties at the application layer.

If I wanted to do this the better way, I would implement it at the link-
layer by sniffing packets, replacing MAC source/destination and ip-layer
IP source/destination addresses. Rather than using raw-sockets, I would
move everything into the kernel.

The port numbers in the diagram is actually arbitrary. They are the standard
ports from http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers,
but may be configured as as whatever on the arbitrator.

    [========]                                                  [========]
    [client 1] ----------                        ------------>  [server 1]
    [========] request 1 |                      |  request 1    [========]
               HTTP:80   |    [==========]      |  HTTP:80      [:80     ]
                         |    [arbitrator]------|
                         |    [==========]      |
    [========]           |    [:22 ssh   ]      |               [========]
    [client 2] ----------|    [:23 telnet]      |------------>  [server 2]
    [========] request 2  --> [:80 http  ]      |  request 2    [========]
               HTTP:80    --> [:443 https]      |  HTTP:80      [:80     ]
                         |    [==========]      |
                         |                      |
    [========]           |                      |               [========]
    [client 3] ----------                        ------------>  [server 3]
    [========] request 3                           request 3    [========]
               HTTPS:443                           HTTPS:443    [:443    ]


====
TODO
====
    * Add link-layer custom ping for dynamic ratio algorithm.


=====
Build
=====
[bash]$ cd src
[bash]$ make
[bash]$ ./arbitrator


==============
DEBUGGING TIPS
==============
    zero@zero-laptop:~/arbitrator/src$ ps aux | grep arbit
    zero     17901  0.0  0.0      0     0 pts/2    Zl+  18:33   0:00 [arbitrator] <defunct>
    zero@zero-laptop:~/arbitrator/src$ ps -Lf 17901
    UID        PID  PPID   LWP  C NLWP STIME TTY      STAT   TIME CMD
    zero     17901 17815 17901  0    3 18:33 pts/2    Zl+    0:00 [arbitrator] <defunct>
    zero     17901 17815 17902  0    3 18:33 pts/2    Sl+    0:00 [arbitrator]
    zero     17901 17815 17903  0    3 18:33 pts/2    Sl+    0:00 [arbitrator]
    zero@zero-laptop:~/arbitrator/src$ ps -T 17901
      PID  SPID TTY      STAT   TIME COMMAND
    17901 17901 pts/2    Zl+    0:00 [arbitrator] <defunct>
    17901 17902 pts/2    Sl+    0:00 [arbitrator]
    17901 17903 pts/2    Sl+    0:00 [arbitrator]
    zero@zero-laptop:~/arbitrator/src$ ps -Lm 17901
      PID   LWP TTY      STAT   TIME COMMAND
    17901     - pts/2    -      0:00 [arbitrator] <defunct>
        - 17901 -        Zl+    0:00 -
        - 17902 -        Sl+    0:00 -
        - 17903 -        Sl+    0:00 -

    zero@zero-laptop:~/arbitrator/src$ gdb arbitrator
    Reading symbols from /home/zero/arbitrator/src/arbitrator...done.
    (gdb) b nodes.c:21
    Breakpoint 1 at 0x804a0e2: file nodes.c, line 21.
    (gdb) run
    Starting program: /home/zero/arbitrator/src/arbitrator
    [Thread debugging using libthread_db enabled]
    
    Breakpoint 1, add_node (ip_destination=0x804aa70 "192.168.1.3") at nodes.c:21
    21          node_t *new_node = malloc(sizeof(node_t));
    (gdb)
